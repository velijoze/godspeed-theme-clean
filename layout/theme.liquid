<!doctype html>
<!--[if lt IE 7]><html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]><html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]><html class="no-js lt-ie9" lang="en"> <![endif]-->
<!--[if IE 9 ]><html class="ie9 no-js"> <![endif]-->
<!--[if (gt IE 9)|!(IE)]><!--> <html class="no-js"> <!--<![endif]-->
<head>

  <!-- ======================= godspeed Theme V2.4.1 ========================= -->
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">

  {% if settings.favicon != blank %}
    <link rel="shortcut icon" href="{{ settings.favicon | img_url: '32x32' }}" type="image/png">
  {% endif %}

  <!-- Title and description ================================================ -->
  <title>
  {{ page_title }}{% if current_tags %}{% assign meta_tags = current_tags | join: ', ' %} &ndash; {{ 'general.meta.tags' | t: tags: meta_tags }}{% endif %}{% if current_page != 1 %} &ndash; {{ 'general.meta.page' | t: page: current_page }}{% endif %}{% unless page_title contains shop.name %} &ndash; {{ shop.name }}{% endunless %}
  </title>

  {% if page_description %}
  <meta name="description" content="{{ page_description | escape }}">
  {% endif %}

  <!-- Product meta ========================================================= -->
  {% include 'social-meta-tags' %}

  <!-- Helpers ============================================================== -->
  <link rel="canonical" href="{{ canonical_url }}">
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <meta name="theme-color" content="{{ settings.color_primary }}">

  <!-- CSS ================================================================== -->
  {{ 'style.scss.css' | asset_url | stylesheet_tag }}

  <!-- Fonts ================================================================ -->
  {% include 'fonts' %}

  <!-- Modernizr ============================================================ -->
  {{ 'modernizr.min.js' | asset_url | script_tag }}

  <!-- jQuery v2.2.3 ======================================================== -->
  {{ 'jquery.min.js' | asset_url | script_tag }}

  

  <script>
    var theme = {
      strings: {
        addToCart: {{ 'products.product.add_to_cart' | t | json }},
        soldOut: {{ 'products.product.sold_out' | t | json }},
        unavailable: {{ 'products.product.unavailable' | t | json }}
      },
      moneyFormat: {{ shop.money_format | json }}
    }
  </script>

  {% comment %}
    If you store has customer accounts disabled, you can remove the following JS file
  {% endcomment %}
  {% if template contains 'customers' %}
    {{ 'shopify_common.js' | shopify_asset_url | script_tag }}
  {% endif %}

  

  <!-- Header hook for plugins ============================================== -->
  {{ content_for_header }}
</head>

<body id="{{ page_title | handle }}" class="{% if customer %}customer-logged-in {% endif %}template-{{ template | replace: '.', ' ' | truncatewords: 1, '' | handle }}" >

  {% section 'header' %}

  <main class="main-content" role="main">
    {{ content_for_layout }}
  </main>

  {% section 'footer' %}

  <script id="JsQty" type="text/template">
  {% raw %}
    <div class="js-qty">
      <button type="button" class="js-qty__adjust js-qty__adjust--minus" data-id="{{id}}" data-qty="{{itemMinus}}">&minus;</button>
      <input type="text" class="js-qty__num QuantityInput" value="{{itemQty}}" min="1" data-id="{{id}}" aria-label="quantity" pattern="[0-9]*" name="{{inputName}}" id="{{inputId}}" data-submit="{{submit}}">
      <button type="button" class="js-qty__adjust js-qty__adjust--plus" data-id="{{id}}" data-qty="{{itemAdd}}">+</button>
    </div>
  {% endraw %}
  </script>
  <script id="JsQty--cart" type="text/template">
  {% raw %}
    <div class="js-qty">
      <button type="button" class="js-qty__adjust js-qty__adjust--minus" data-id="{{id}}" data-qty="{{itemMinus}}">&minus;</button>
      <input type="text" value="{{itemQty}}" class="js-qty__num QuantityInput"  min="1" data-id="{{id}}" aria-label="quantity" pattern="[0-9]*" name="updates[]" id="updates_{{id}}" data-submit="{{submit}}">
      <button type="button" class="js-qty__adjust js-qty__adjust--plus" data-id="{{id}}" data-qty="{{itemAdd}}">+</button>
    </div>
  {% endraw %}
  </script>

  <!-- Shop.js ============================================================== -->
  {{ 'shop.js' | asset_url | script_tag }}

  <!-- E-Bike Toolkit ======================================================= -->
  {{ 'godspeed-bike-toolkit.js' | asset_url | script_tag }}

  {% unless settings.cart_type == 'page' %}
  <!-- Ajaxify Cart Plugin ================================================== -->
    {{ 'ajaxify.scss.css' | asset_url | stylesheet_tag }}
    {% include 'ajax-cart-template' %}
    {{ 'ajaxify.js' | asset_url | script_tag }}
    <script>
      jQuery(document).ready(function(){
       ajaxifyShopify.init({
         method: 'modal',
         wrapperClass: 'wrapper',
         formSelector: '.product-form',
         addToCartSelector: '.addToCart',
         cartCountSelector: '.cartCount',
         cartCostSelector: '.cartCost',
         toggleCartButton: '.CartToggle',
         useCartTemplate: true,
         btnClass: 'btn',
         moneyFormat: {{ shop.money_format | json }},
         disableAjaxCart: false,
         enableQtySelectors: true,
         prependDrawerTo: 'body',
         onToggleCallback: function(){
           jQuery('body').trigger('ajaxCart.afterCartLoad')
         }
       });
      });
    </script>
  {% endunless %}

  <script>
    {% if newHash %}
      $(function() {
        timber.updateHash('{{ newHash }}');
      });
    {% endif %}
    {% if resetPassword %}
      $(function() {
        timber.resetPasswordSuccess();
      });
    {% endif %}
  </script>

  <!-- Paste mailchimp popup code between comments ===================================== -->

  <!-- End mailchimp ================================================== -->

  <!-- Notification System ================================================== -->
  <div id="notification-container"></div>

  <script>
    window.NotificationSystem = {
      show: function(message, type = 'info', duration = 5000) {
        const container = document.getElementById('notification-container');
        if (!container) return;

        const notification = document.createElement('div');
        notification.className = `notification notification--${type}`;
        
        const icons = {
          success: '✓',
          error: '✕',
          warning: '⚠',
          info: 'ℹ'
        };

        notification.innerHTML = `
          <div class="notification__content">
            <span class="notification__icon">${icons[type] || icons.info}</span>
            <div class="notification__message">${message}</div>
          </div>
          <button class="notification__close" onclick="this.parentElement.remove()">&times;</button>
        `;

        container.appendChild(notification);

        // Trigger animation
        setTimeout(() => notification.classList.add('show'), 10);

        // Auto remove
        if (duration > 0) {
          setTimeout(() => {
            notification.classList.remove('show');
            setTimeout(() => notification.remove(), 300);
          }, duration);
        }
      }
    };

    // Global notification functions
    window.showNotification = window.NotificationSystem.show;
    window.showSuccess = (msg, dur) => window.NotificationSystem.show(msg, 'success', dur);
    window.showError = (msg, dur) => window.NotificationSystem.show(msg, 'error', dur);
    window.showWarning = (msg, dur) => window.NotificationSystem.show(msg, 'warning', dur);
    window.showInfo = (msg, dur) => window.NotificationSystem.show(msg, 'info', dur);

    // Loading state utilities
    window.LoadingStates = {
      showButtonLoading: function(buttonSelector) {
        const btn = window.SafeDOM.querySelector(buttonSelector);
        if (btn) {
          btn.classList.add('loading');
          btn.disabled = true;
          if (!btn.querySelector('.btn-text')) {
            btn.innerHTML = `<span class="btn-text">${btn.innerHTML}</span>`;
          }
        }
      },
      
      hideButtonLoading: function(buttonSelector) {
        const btn = window.SafeDOM.querySelector(buttonSelector);
        if (btn) {
          btn.classList.remove('loading');
          btn.disabled = false;
        }
      },
      
      showOverlay: function(containerSelector) {
        const container = window.SafeDOM.querySelector(containerSelector);
        if (container) {
          container.style.position = 'relative';
          const overlay = document.createElement('div');
          overlay.className = 'loading-overlay';
          overlay.innerHTML = '<div class="loading-spinner"></div>';
          overlay.dataset.loadingOverlay = 'true';
          container.appendChild(overlay);
        }
      },
      
      hideOverlay: function(containerSelector) {
        const container = window.SafeDOM.querySelector(containerSelector);
        if (container) {
          const overlay = container.querySelector('[data-loading-overlay]');
          if (overlay) overlay.remove();
        }
      },
      
      showSkeleton: function(containerSelector, type = 'text') {
        const container = window.SafeDOM.querySelector(containerSelector);
        if (container) {
          container.innerHTML = this.getSkeletonHTML(type);
        }
      },
      
      getSkeletonHTML: function(type) {
        switch (type) {
          case 'image':
            return '<div class="loading-skeleton skeleton-image"></div>';
          case 'button':
            return '<div class="loading-skeleton skeleton-button"></div>';
          case 'product':
            return `
              <div class="loading-skeleton skeleton-image"></div>
              <div class="loading-skeleton skeleton-text"></div>
              <div class="loading-skeleton skeleton-text"></div>
              <div class="loading-skeleton skeleton-button"></div>
            `;
          default:
            return `
              <div class="loading-skeleton skeleton-text"></div>
              <div class="loading-skeleton skeleton-text"></div>
              <div class="loading-skeleton skeleton-text"></div>
            `;
        }
      }
    };

    // Global loading functions
    window.showLoading = window.LoadingStates.showButtonLoading;
    window.hideLoading = window.LoadingStates.hideButtonLoading;
    window.showLoadingOverlay = window.LoadingStates.showOverlay;
    window.hideLoadingOverlay = window.LoadingStates.hideOverlay;

    // Error handling utilities
    window.SafeDOM = {
      querySelector: function(selector) {
        try {
          const element = document.querySelector(selector);
          if (!element) {
            console.warn(`Element not found: ${selector}`);
            return null;
          }
          return element;
        } catch (error) {
          console.error(`Error selecting element ${selector}:`, error);
          return null;
        }
      },
      
      querySelectorAll: function(selector) {
        try {
          return document.querySelectorAll(selector);
        } catch (error) {
          console.error(`Error selecting elements ${selector}:`, error);
          return [];
        }
      },
      
      getElementById: function(id) {
        try {
          const element = document.getElementById(id);
          if (!element) {
            console.warn(`Element with ID not found: ${id}`);
            return null;
          }
          return element;
        } catch (error) {
          console.error(`Error getting element by ID ${id}:`, error);
          return null;
        }
      },
      
      addEventListener: function(selector, event, callback) {
        const element = this.querySelector(selector);
        if (element) {
          try {
            element.addEventListener(event, callback);
            return true;
          } catch (error) {
            console.error(`Error adding event listener to ${selector}:`, error);
            return false;
          }
        }
        return false;
      },
      
      safeExecute: function(callback, errorMessage = 'Function execution failed') {
        try {
          return callback();
        } catch (error) {
          console.error(errorMessage, error);
          return null;
        }
      }
    };

    // Global safe DOM functions
    window.safeQuery = window.SafeDOM.querySelector;
    window.safeQueryAll = window.SafeDOM.querySelectorAll;
    window.safeGetById = window.SafeDOM.getElementById;
    window.safeExecute = window.SafeDOM.safeExecute;
  </script>

</body>
</html>
